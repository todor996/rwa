{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/rxjs/Observable.js","webpack:///./node_modules/rxjs/Subscriber.js","webpack:///./node_modules/rxjs/util/root.js","webpack:///./node_modules/rxjs/Subscription.js","webpack:///./node_modules/rxjs/util/isArray.js","webpack:///./node_modules/rxjs/observable/ArrayObservable.js","webpack:///./node_modules/rxjs/util/errorObject.js","webpack:///./node_modules/rxjs/Subject.js","webpack:///./node_modules/rxjs/util/isScheduler.js","webpack:///./node_modules/rxjs/OuterSubscriber.js","webpack:///./node_modules/rxjs/util/subscribeToResult.js","webpack:///./node_modules/rxjs/util/isFunction.js","webpack:///./node_modules/rxjs/util/tryCatch.js","webpack:///./node_modules/rxjs/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/symbol/observable.js","webpack:///./node_modules/rxjs/observable/ScalarObservable.js","webpack:///./node_modules/rxjs/observable/EmptyObservable.js","webpack:///./node_modules/rxjs/symbol/iterator.js","webpack:///./src/konstante.js","webpack:///./node_modules/rxjs/util/isObject.js","webpack:///./node_modules/rxjs/Observer.js","webpack:///./node_modules/rxjs/util/ObjectUnsubscribedError.js","webpack:///./node_modules/rxjs/scheduler/AsyncAction.js","webpack:///./node_modules/rxjs/scheduler/AsyncScheduler.js","webpack:///./node_modules/rxjs/util/isArrayLike.js","webpack:///./node_modules/rxjs/util/isPromise.js","webpack:///./node_modules/rxjs/observable/of.js","webpack:///./node_modules/rxjs/operators/multicast.js","webpack:///./node_modules/rxjs/operators/refCount.js","webpack:///./src/polje.js","webpack:///./src/index.js","webpack:///./src/rxjsMiddle.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/rxjs/util/toSubscriber.js","webpack:///./node_modules/rxjs/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/util/pipe.js","webpack:///./node_modules/rxjs/util/noop.js","webpack:///./node_modules/rxjs/BehaviorSubject.js","webpack:///./node_modules/rxjs/SubjectSubscription.js","webpack:///./node_modules/rxjs/scheduler/animationFrame.js","webpack:///./node_modules/rxjs/scheduler/AnimationFrameAction.js","webpack:///./node_modules/rxjs/scheduler/Action.js","webpack:///./node_modules/rxjs/util/AnimationFrame.js","webpack:///./node_modules/rxjs/scheduler/AnimationFrameScheduler.js","webpack:///./node_modules/rxjs/Scheduler.js","webpack:///./node_modules/rxjs/add/observable/interval.js","webpack:///./node_modules/rxjs/observable/interval.js","webpack:///./node_modules/rxjs/observable/IntervalObservable.js","webpack:///./node_modules/rxjs/util/isNumeric.js","webpack:///./node_modules/rxjs/scheduler/async.js","webpack:///./node_modules/rxjs/add/observable/combineLatest.js","webpack:///./node_modules/rxjs/observable/combineLatest.js","webpack:///./node_modules/rxjs/operators/combineLatest.js","webpack:///./node_modules/rxjs/InnerSubscriber.js","webpack:///./node_modules/rxjs/add/observable/fromEvent.js","webpack:///./node_modules/rxjs/observable/fromEvent.js","webpack:///./node_modules/rxjs/observable/FromEventObservable.js","webpack:///./node_modules/rxjs/add/observable/of.js","webpack:///./node_modules/rxjs/add/operator/map.js","webpack:///./node_modules/rxjs/operator/map.js","webpack:///./node_modules/rxjs/operators/map.js","webpack:///./node_modules/rxjs/add/operator/skip.js","webpack:///./node_modules/rxjs/operator/skip.js","webpack:///./node_modules/rxjs/operators/skip.js","webpack:///./node_modules/rxjs/add/operator/scan.js","webpack:///./node_modules/rxjs/operator/scan.js","webpack:///./node_modules/rxjs/operators/scan.js","webpack:///./node_modules/rxjs/add/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/operators/distinctUntilChanged.js","webpack:///./node_modules/rxjs/add/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/operators/withLatestFrom.js","webpack:///./node_modules/rxjs/add/operator/do.js","webpack:///./node_modules/rxjs/operator/do.js","webpack:///./node_modules/rxjs/operators/tap.js","webpack:///./node_modules/rxjs/add/operator/startWith.js","webpack:///./node_modules/rxjs/operator/startWith.js","webpack:///./node_modules/rxjs/operators/startWith.js","webpack:///./node_modules/rxjs/observable/concat.js","webpack:///./node_modules/rxjs/observable/from.js","webpack:///./node_modules/rxjs/observable/FromObservable.js","webpack:///./node_modules/rxjs/observable/PromiseObservable.js","webpack:///./node_modules/rxjs/observable/IteratorObservable.js","webpack:///./node_modules/rxjs/observable/ArrayLikeObservable.js","webpack:///./node_modules/rxjs/operators/observeOn.js","webpack:///./node_modules/rxjs/Notification.js","webpack:///./node_modules/rxjs/operators/concatAll.js","webpack:///./node_modules/rxjs/operators/mergeAll.js","webpack:///./node_modules/rxjs/operators/mergeMap.js","webpack:///./node_modules/rxjs/util/identity.js","webpack:///./node_modules/rxjs/add/operator/share.js","webpack:///./node_modules/rxjs/operator/share.js","webpack:///./node_modules/rxjs/operators/share.js","webpack:///./node_modules/rxjs/observable/ConnectableObservable.js","webpack:///./node_modules/rxjs/add/operator/switchMap.js","webpack:///./node_modules/rxjs/operator/switchMap.js","webpack:///./node_modules/rxjs/operators/switchMap.js","webpack:///./node_modules/rxjs/add/operator/takeWhile.js","webpack:///./node_modules/rxjs/operator/takeWhile.js","webpack:///./node_modules/rxjs/operators/takeWhile.js","webpack:///./node_modules/rxjs/add/operator/publish.js","webpack:///./node_modules/rxjs/operator/publish.js","webpack:///./node_modules/rxjs/operators/publish.js","webpack:///./node_modules/rxjs/add/operator/first.js","webpack:///./node_modules/rxjs/operator/first.js","webpack:///./node_modules/rxjs/operators/first.js","webpack:///./node_modules/rxjs/util/EmptyError.js","webpack:///./node_modules/rxjs/add/operator/filter.js","webpack:///./node_modules/rxjs/operator/filter.js","webpack:///./node_modules/rxjs/operators/filter.js","webpack:///./src/baza.js","webpack:///./src/funkcije.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","root_1","toSubscriber_1","observable_1","pipe_1","Observable","subscribe","this","_isScalar","_subscribe","lift","operator","observable","source","observerOrNext","error","complete","sink","toSubscriber","add","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","err","forEach","next","PromiseCtor","_this","root","Rx","config","Promise","Error","resolve","reject","subscription","unsubscribe","subscriber","pipe","operations","_i","arguments","length","pipeFromArray","toPromise","x","__extends","b","__","constructor","isFunction_1","Subscription_1","Observer_1","rxSubscriber_1","Subscriber","_super","destinationOrNext","isStopped","destination","empty","isTrustedSubscriber","trustedSubscriber","rxSubscriber","SafeSubscriber","_next","_error","_complete","closed","_unsubscribeAndRecycle","_parent","_parents","Subscription","_parentSubscriber","context","isFunction","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","parent","_unsubscribe","obj","__window","window","__self","self","WorkerGlobalScope","_root","global","isArray_1","isObject_1","tryCatch_1","errorObject_1","UnsubscriptionError_1","_subscriptions","errors","hasErrors","index","len","remove","tryCatch","errorObject","e","UnsubscriptionError","flattenUnsubscriptionErrors","isArray","sub","isObject","concat","push","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","reduce","errs","Array","Observable_1","ScalarObservable_1","EmptyObservable_1","isScheduler_1","ArrayObservable","array","scheduler","of","isScheduler","pop","ScalarObservable","EmptyObservable","dispatch","state","count","schedule","Subscriber_1","ObjectUnsubscribedError_1","SubjectSubscription_1","SubjectSubscriber","Subject","observers","hasError","thrownError","subject","AnonymousSubject","ObjectUnsubscribedError","copy","slice","SubjectSubscription","asObservable","OuterSubscriber","apply","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","isArrayLike_1","isPromise_1","iterator_1","InnerSubscriber_1","subscribeToResult","outerSubscriber","result","InnerSubscriber","isArrayLike","isPromise","then","setTimeout","iterator","item","done","obs","TypeError","msg","tryCatchTarget","tryCatcher","for","$$rxSubscriber","getSymbolObservable","$$observable","arg","symbolIteratorPonyfill","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","$$iterator","SNAKE_LENGTH","APPLE_COUNT","POINTS_PER_APPLE","SPEED","FPS","URL","DIRECTIONS","65","y","39","38","40","stack","message","AsyncAction","work","pending","delay","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","undefined","actions","Action","AsyncScheduler","active","scheduled","action","shift","Scheduler","ArrayObservable_1","ConnectableObservable_1","multicast","subjectOrSubjectFactory","selector","subjectFactory","MulticastOperator","connectable","connectableObservableDescriptor","refCount","RefCountOperator","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","createCanvasElement","canvas","document","createElement","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","renderScene","ctx","scene","renderBackground","renderScore","score","renderApples","apples","renderSnake","snake","renderGameOver","Baza","res","l2","sort","sr","console","log","table","querySelector","thead","th","th2","tr","tdUser","tdScore","innerText","appendChild","style","border","filter","a","body","div","div2","margin","cssFloat","Score","button","onclick","location","reload","button2","disabled","User","username","input","addScore","onkeydown","fillTable","display","getRandomPosition","position","getRandomNumber","COLS","ROWS","some","segment","checkCollision","isEmptyCell","drawText","paintCell","_baza","GAP_SIZE","CELL_SIZE","textX","textY","toString","apple","point","wrapBounds","getSegmentColor","fillStyle","fillRect","text","fontSize","horizontalAlign","verticalAlign","font","textAlign","textBaseline","fillText","color","min","max","Math","floor","random","_rxjsMiddle","_konstante","_polje","_funkcije","getContext","POCETNA_POZ","ticks$","interval","direction$","fromEvent","map","event","keyCode","direction","scan","nextDirection","startWith","distinctUntilChanged","length$","BehaviorSubject","snakeLength$","step","snakeLength","share","score$","_","snake$","withLatestFrom","move","generateSnake","apples$","eat","generateApples","scene$","skip","do","combineLatest","animationFrame","takeWhile","isGameOver","g","Function","eval","nextOrObserver","join","noop_1","fns","prev","noop","Subject_1","_value","getValue","configurable","subscriberIndex","AnimationFrameAction_1","AnimationFrameScheduler_1","AnimationFrameScheduler","AnimationFrameAction","AsyncAction_1","AnimationFrame_1","AnimationFrame","requestAnimationFrame","cancelAnimationFrame","RequestAnimationFrameDefinition","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","cb","SchedulerAction","now","Date","interval_1","IntervalObservable_1","IntervalObservable","isNumeric_1","async_1","period","async","isNumeric","val","parseFloat","AsyncScheduler_1","combineLatest_1","observables","project","CombineLatestOperator","OuterSubscriber_1","subscribeToResult_1","none","CombineLatestSubscriber","values","toRespond","unused","oldVal","_tryProject","fromEvent_1","FromEventObservable_1","FromEventObservable","sourceObj","eventName","options","target","setupSubscription","handler","isNodeList","isHTMLCollection","addEventListener","removeEventListener","isEventTarget","source_1","on","off","isJQueryStyleEventEmitter","source_2","addListener","removeListener","isNodeStyleEventEmitter","source_3","args","of_1","map_1","thisArg","MapOperator","MapSubscriber","skip_1","SkipOperator","total","SkipSubscriber","scan_1","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","set","_tryNext","distinctUntilChanged_1","compare","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","Boolean","withLatestFrom_1","WithLatestFromOperator","WithLatestFromSubscriber","found","do_1","_do","tap_1","tap","DoOperator","DoSubscriber","safeSubscriber","startWith_1","concat_1","from_1","concatAll_1","from","concatAll","FromObservable_1","FromObservable","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","ish","PromiseObservable","IteratorObservable","ArrayLikeObservable","ObserveOnSubscriber","promise","dispatchNext","dispatchError","StringIterator","ArrayIterator","getIterator","return","str","idx","charAt","arr","isNaN","isFinite","numberIsFinite","valueAsNumber","sign","abs","maxSafeInteger","toLength","pow","arrayLike","Notification_1","observeOn","ObserveOnOperator","notification","observe","scheduleMessage","ObserveOnMessage","Notification","createNext","createError","createComplete","kind","hasValue","observer","accept","toObservable","throw","undefinedValueNotification","completeNotification","mergeAll_1","mergeAll","mergeMap_1","identity_1","concurrent","Number","POSITIVE_INFINITY","mergeMap","identity","resultSelector","MergeMapOperator","MergeMapSubscriber","hasCompleted","buffer","_innerSub","_notifyResultSelector","share_1","multicast_1","refCount_1","shareSubjectFactory","ConnectableObservable","_isComplete","getSubject","_subject","ConnectableSubscriber","connectableProto","writable","switchMap_1","switchMap","SwitchMapOperator","SwitchMapSubscriber","innerSubscription","_tryNotifyNext","takeWhile_1","predicate","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","publish_1","publish","first_1","first","defaultValue","EmptyError_1","FirstOperator","FirstSubscriber","_emitted","_tryPredicate","_emit","_tryResultSelector","_emitFinal","EmptyError","filter_1","FilterOperator","FilterSubscriber","fetch","resp","json","method","headers","Accept","Content-Type","JSON","stringify","head","previous","isOpposite","_ref","_ref2","_slicedToArray","nx","ny","tail","unshift","_toConsumableArray"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);\n}\n//# sourceMappingURL=Subscriber.js.map","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n//# sourceMappingURL=ArrayObservable.js.map","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map","\"use strict\";\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\nexports.isScheduler = isScheduler;\n//# sourceMappingURL=isScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n//# sourceMappingURL=OuterSubscriber.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar isArrayLike_1 = require('./isArrayLike');\nvar isPromise_1 = require('./isPromise');\nvar isObject_1 = require('./isObject');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\nvar InnerSubscriber_1 = require('../InnerSubscriber');\nvar observable_1 = require('../symbol/observable');\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike_1.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator_1.iterator] === 'function') {\n        var iterator = result[iterator_1.iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable_1.observable] === 'function') {\n        var obs = result[observable_1.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n//# sourceMappingURL=subscribeToResult.js.map","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = (function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_1.Observable));\nexports.ScalarObservable = ScalarObservable;\n//# sourceMappingURL=ScalarObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = (function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    /** @deprecated internal use only */ EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_1.Observable));\nexports.EmptyObservable = EmptyObservable;\n//# sourceMappingURL=EmptyObservable.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root_1.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n//# sourceMappingURL=iterator.js.map","\r\nexport const SNAKE_LENGTH = 5;\r\n\r\nexport const APPLE_COUNT = 2;\r\nexport const POINTS_PER_APPLE = 1;\r\n\r\nexport const SPEED = 200;\r\nexport const FPS = 60;\r\nexport const URL=\"http://localhost:3000/scores\";\r\nexport const DIRECTIONS = {\r\n  65: { x: -1, y: 0 }, //slovo A\r\n  39: { x: 1, y: 0 }, //strelice\r\n  38: { x: 0, y: -1 },\r\n  40: { x: 0, y: 1 }\r\n};","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated internal use only */ AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map","\"use strict\";\nexports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map","\"use strict\";\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n//# sourceMappingURL=isPromise.js.map","\"use strict\";\nvar ArrayObservable_1 = require('./ArrayObservable');\nexports.of = ArrayObservable_1.ArrayObservable.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexports.multicast = multicast;\nvar MulticastOperator = (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexports.MulticastOperator = MulticastOperator;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nexports.refCount = refCount;\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=refCount.js.map","import {Baza} from './baza';\r\nexport const COLS = 30;\r\nexport const ROWS = 30;\r\nexport const GAP_SIZE = 1;\r\nexport const CELL_SIZE = 10;\r\nexport const CANVAS_WIDTH = COLS * (CELL_SIZE + GAP_SIZE);\r\nexport const CANVAS_HEIGHT = ROWS * (CELL_SIZE + GAP_SIZE); \r\nlet Score;\r\nexport function createCanvasElement() {\r\n  const canvas = document.createElement('canvas');\r\n  canvas.width = CANVAS_WIDTH;\r\n  canvas.height = CANVAS_HEIGHT;\r\n  return canvas;\r\n}\r\n\r\n\r\nexport function renderScene(ctx, scene) {\r\n  renderBackground(ctx);\r\n  renderScore(ctx, scene.score);\r\n  renderApples(ctx, scene.apples);\r\n  renderSnake(ctx, scene.snake);\r\n  \r\n}\r\n\r\n\r\nexport function renderScore(ctx, score) {\r\n  let textX = CANVAS_WIDTH / 2;\r\n  let textY = CANVAS_HEIGHT / 2;\r\n  Score=score;\r\n  //localStorage.setItem(\"score\",score);\r\n  drawText(ctx, score.toString(), textX, textY, 'rgba(0, 0, 0, 0.1)', 150);\r\n}\r\n\r\n\r\nexport function renderApples(ctx, apples=[]) {\r\n  apples.forEach(apple => paintCell(ctx, apple, 'red'));\r\n}\r\n\r\n\r\nexport function renderSnake(ctx, snake) {\r\n  snake.forEach((segment, index) => paintCell(ctx, wrapBounds(segment), getSegmentColor(index)));\r\n}\r\nfunction sr(a,b){\r\n  return a['score']<b['score']\r\n}\r\nexport function renderGameOver(canvas) {\r\n /*ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\r\n  ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n  let q=localStorage.getItem(\"score\");\r\n  let textX = CANVAS_WIDTH / 2;\r\n  let textY = CANVAS_HEIGHT / 2;\r\n  \r\n */\r\nBaza.get()\r\n.then(res=>\r\n  {\r\n\r\n  let l2=res.sort(sr);\r\n  console.log(l2);\r\n  const table=document.querySelector(\"#tbl\");\r\n  \r\n  fillTable(table,l2);\r\n  canvas.style.display=\"none\";\r\n  \r\n  })\r\n\r\n}\r\nfunction fillTable(table,array){\r\n  \r\n  let thead=document.createElement(\"thead\");\r\n  let th=document.createElement(\"th\");\r\n  let th2=document.createElement(\"th\");\r\n  let tr;\r\n  let tdUser;\r\n  let tdScore;\r\n  th.innerText=\"User\";\r\n  th2.innerText=\"Score\";\r\n  thead.appendChild(th);\r\n  thead.appendChild(th2);\r\n  table.appendChild(thead);\r\n\r\n  table.style.border=\"1px solid black\";\r\n  array\r\n  .filter(a=>a.score>0)\r\n  .forEach(obj=>{\r\n  tr=document.createElement(\"tr\");\r\n  tdUser=document.createElement(\"td\");\r\n  tdUser.innerText=obj['username'];\r\n  tdScore=document.createElement(\"td\");\r\n  tdScore.innerText=obj['score'];\r\n  tr.appendChild(tdUser);\r\n  tr.appendChild(tdScore);\r\n  table.appendChild(tr);\r\n  })\r\n  let body=document.body;\r\n  let div=document.createElement(\"div\");\r\n  let div2=document.createElement(\"div\");\r\n  div2.style.margin=\"3px\";\r\n  div2.style.cssFloat=\"left\";\r\n\r\n  div.innerText=`Your score is ${Score}, if you would like to save it to Ladder, press Save`;\r\n  let button=document.createElement(\"button\");\r\n  button.innerText=\"Restart Game\";\r\n  \r\n  button.onclick=()=>window.location.reload(true);\r\n  let button2=document.createElement(\"button\");\r\n  button2.innerText=\"Save score\";\r\n  button2.disabled=\"disabled\";\r\n  button2.onclick=()=>{\r\n    let User={\r\n      'username':input.value,\r\n      'score':Score\r\n    }\r\n    Baza.addScore(User)\r\n    .then(res=>console.log(res));\r\n  }\r\n  let input=document.createElement(\"input\");\r\n  input.onkeydown=()=>{\r\n\r\n    if(input.value.length)\r\n    \r\n      button2.disabled=\"\";\r\n      \r\n    else button2.disabled=\"disabled\";\r\n  }\r\n  div2.appendChild(button);\r\n  div2.appendChild(input);\r\n  div2.appendChild(button2);\r\n\r\n  body.appendChild(div);\r\n  body.appendChild(div2);\r\n}\r\n\r\nexport function getRandomPosition(snake = []) {\r\n  let position = {\r\n    x: getRandomNumber(0, COLS - 1),\r\n    y: getRandomNumber(0, ROWS - 1)\r\n  };\r\n\r\n  if (isEmptyCell(position, snake)) {\r\n    return position;\r\n  }\r\n\r\n  return getRandomPosition(snake);\r\n}\r\n\r\n\r\nexport function checkCollision(a, b) {\r\n  return a.x === b.x && a.y === b.y;\r\n}\r\n\r\nexport function renderBackground(ctx) {\r\n  ctx.fillStyle = '#EEE';\r\n  ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n}\r\n\r\nexport function drawText(ctx, text, x, y, fillStyle,\r\n  fontSize, horizontalAlign = 'center', verticalAlign = 'middle') {\r\n\r\n  ctx.fillStyle = fillStyle;\r\n  ctx.font = `bold ${fontSize}px sans-serif`;\r\n\r\n  let textX = x;\r\n  let textY = y;\r\n\r\n  ctx.textAlign = horizontalAlign;\r\n  ctx.textBaseline = verticalAlign;\r\n\r\n  ctx.fillText(text, textX, textY);\r\n}\r\n\r\nexport function paintCell(ctx, point, color) {\r\n  const x = point.x * CELL_SIZE + (point.x * GAP_SIZE);\r\n  const y = point.y * CELL_SIZE + (point.y * GAP_SIZE);\r\n\r\n  ctx.fillStyle = color;\r\n  ctx.fillRect(x, y, CELL_SIZE, CELL_SIZE);\r\n}\r\n\r\nfunction isEmptyCell(position, snake) {\r\n  return !snake.some(segment => checkCollision(segment, position));\r\n}\r\n\r\nfunction getRandomNumber(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n\r\n\r\nfunction getSegmentColor(index) {\r\n  return index === 0 ? 'black' : '#2196f3';\r\n}\r\n\r\nfunction wrapBounds(point) {\r\n  point.x = point.x >= COLS ? 0 : point.x < 0 ? COLS - 1 : point.x;\r\n  point.y = point.y >= ROWS ? 0 : point.y < 0 ? ROWS - 1 : point.y;\r\n\r\n  return point;\r\n}\r\n","import { Observable, BehaviorSubject, animationFrame } from './rxjsMiddle';\r\nimport { DIRECTIONS, SPEED, SNAKE_LENGTH, FPS, POINTS_PER_APPLE } from './konstante';\r\n\r\nimport {\r\n  createCanvasElement,\r\n  renderScene,\r\n  renderGameOver\r\n} from './polje';\r\n\r\nimport {\r\n  isGameOver,\r\n  nextDirection,\r\n  move,\r\n  eat,\r\n  generateSnake,\r\n  generateApples\r\n} from './funkcije';\r\n\r\n/*napravi canvas i 2d context*/\r\nlet canvas = createCanvasElement();\r\nlet ctx = canvas.getContext('2d');\r\ndocument.body.appendChild(canvas);\r\n\r\n\r\nconst POCETNA_POZ = DIRECTIONS[39];\r\n\r\n/**\r\n * Determines the speed of the snake\r\n */\r\nlet ticks$ = Observable.interval(SPEED);\r\n\r\n\r\nlet keydown$ = Observable.fromEvent(document, 'keydown');\r\n\r\n\r\n\r\n/**\r\n * Change direction of the snake based on the latest arrow keypress by the user\r\n */\r\nlet direction$ = keydown$\r\n  .map((event) => DIRECTIONS[event.keyCode])\r\n  .filter(direction => !!direction)\r\n  .scan(nextDirection)\r\n  .startWith(POCETNA_POZ)\r\n  .distinctUntilChanged();\r\n\r\n//Obavesti sve kolika je duzina zmijice\r\nlet length$ = new BehaviorSubject(SNAKE_LENGTH);\r\n/**\r\n * Accumulates the length of the snake (number of body segments)\r\n */\r\nlet snakeLength$ = length$\r\n  .scan((step, snakeLength) => snakeLength + step)\r\n  .share();\r\n\r\n/**\r\n * Player's score\r\n */\r\nlet score$ = snakeLength$\r\n  .startWith(0)\r\n  .scan((score, _) => score + POINTS_PER_APPLE);\r\n\r\n/**\r\n * Accumulates an array of body segments. Each segment is represented\r\n * as a cell on the grid\r\n */\r\nlet snake$= ticks$\r\n  .withLatestFrom(direction$, snakeLength$, (_, direction, snakeLength) => [direction, snakeLength])\r\n  .scan(move, generateSnake())\r\n  .share();\r\n\r\n/**\r\n * List of apples\r\n */\r\nlet apples$ = snake$\r\n  .scan(eat, generateApples())\r\n  .distinctUntilChanged()\r\n  .share();\r\n\r\n/**\r\n * Used to broadcast collisions to update the score and add a new \r\n * body segment to the snake\r\n */\r\nlet appleEaten$ = apples$\r\n  .skip(1)\r\n  .do(() => length$.next(POINTS_PER_APPLE))\r\n  .subscribe();\r\n\r\n/**\r\n * Core game logic which returns an Observable of the scene. This will be \r\n * used to render the game to the canvas as it unfolds\r\n */\r\nlet scene$ = Observable.combineLatest(snake$, apples$, score$, (snake, apples, score) => ({ snake, apples, score }))\r\n\r\n/**\r\n * This stream takes care of rendering the game while maintaining 60 FPS\r\n */\r\nlet game$ = Observable.interval(1000 / FPS, animationFrame)\r\n  .withLatestFrom(scene$, (_, scene) => scene)\r\n  .takeWhile(scene => !isGameOver(scene))\r\n  .subscribe({\r\n    next: (scene) =>{\r\n      console.log(scene$);\r\n      renderScene(ctx, scene)\r\n\r\n    }\r\n    ,\r\n    complete: () => renderGameOver(canvas)\r\n  });","export { Observable } from 'rxjs/Observable';\r\nexport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nexport { animationFrame } from 'rxjs/scheduler/animationFrame';\r\n\r\nimport 'rxjs/add/observable/interval';\r\nimport 'rxjs/add/observable/combineLatest';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/observable/of';\r\n\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/skip';\r\nimport 'rxjs/add/operator/scan';\r\nimport 'rxjs/add/operator/distinctUntilChanged';\r\nimport 'rxjs/add/operator/withLatestFrom';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/startWith';\r\nimport 'rxjs/add/operator/share';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport 'rxjs/add/operator/takeWhile';\r\nimport 'rxjs/add/operator/publish';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/filter';","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map","\"use strict\";\nvar noop_1 = require('./noop');\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n//# sourceMappingURL=pipe.js.map","\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n//# sourceMappingURL=noop.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = (function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        _super.call(this);\n        this._value = _value;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @deprecated internal use only */ BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject_1.Subject));\nexports.BehaviorSubject = BehaviorSubject;\n//# sourceMappingURL=BehaviorSubject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map","\"use strict\";\nvar AnimationFrameAction_1 = require('./AnimationFrameAction');\nvar AnimationFrameScheduler_1 = require('./AnimationFrameScheduler');\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);\n//# sourceMappingURL=animationFrame.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AnimationFrame_1 = require('../util/AnimationFrame');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AnimationFrameAction = (function (_super) {\n    __extends(AnimationFrameAction, _super);\n    function AnimationFrameAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));\n    };\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AnimationFrameAction;\n}(AsyncAction_1.AsyncAction));\nexports.AnimationFrameAction = AnimationFrameAction;\n//# sourceMappingURL=AnimationFrameAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar RequestAnimationFrameDefinition = (function () {\n    function RequestAnimationFrameDefinition(root) {\n        if (root.requestAnimationFrame) {\n            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n        }\n        else if (root.mozRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n        }\n        else if (root.webkitRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n        }\n        else if (root.msRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n        }\n        else if (root.oRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n        }\n        else {\n            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n        }\n    }\n    return RequestAnimationFrameDefinition;\n}());\nexports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\nexports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n//# sourceMappingURL=AnimationFrame.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AnimationFrameScheduler = (function (_super) {\n    __extends(AnimationFrameScheduler, _super);\n    function AnimationFrameScheduler() {\n        _super.apply(this, arguments);\n    }\n    AnimationFrameScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AnimationFrameScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AnimationFrameScheduler = AnimationFrameScheduler;\n//# sourceMappingURL=AnimationFrameScheduler.js.map","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar interval_1 = require('../../observable/interval');\nObservable_1.Observable.interval = interval_1.interval;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar IntervalObservable_1 = require('./IntervalObservable');\nexports.interval = IntervalObservable_1.IntervalObservable.create;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = (function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async_1.async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    /** @deprecated internal use only */ IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n//# sourceMappingURL=IntervalObservable.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nfunction isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\nexports.isNumeric = isNumeric;\n;\n//# sourceMappingURL=isNumeric.js.map","\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n//# sourceMappingURL=async.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../observable/combineLatest');\nObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n}\nexports.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexports.combineLatest = combineLatest;\nvar CombineLatestOperator = (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = (function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.CombineLatestSubscriber = CombineLatestSubscriber;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n//# sourceMappingURL=InnerSubscriber.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEvent_1 = require('../../observable/fromEvent');\nObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar FromEventObservable_1 = require('./FromEventObservable');\nexports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar isFunction_1 = require('../util/isFunction');\nvar errorObject_1 = require('../util/errorObject');\nvar Subscription_1 = require('../Subscription');\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable = (function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction_1.isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n    };\n    /** @deprecated internal use only */ FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n            if (result === errorObject_1.errorObject) {\n                subscriber.error(errorObject_1.errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_1.Observable));\nexports.FromEventObservable = FromEventObservable;\n//# sourceMappingURL=FromEventObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar of_1 = require('../../observable/of');\nObservable_1.Observable.of = of_1.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar map_1 = require('../operators/map');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return map_1.map(project, thisArg)(this);\n}\nexports.map = map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skip_1 = require('../../operator/skip');\nObservable_1.Observable.prototype.skip = skip_1.skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar skip_1 = require('../operators/skip');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return skip_1.skip(count)(this);\n}\nexports.skip = skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nexports.skip = skip;\nvar SkipOperator = (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = (function (_super) {\n    __extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar scan_1 = require('../../operator/scan');\nObservable_1.Observable.prototype.scan = scan_1.scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar scan_1 = require('../operators/scan');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return scan_1.scan(accumulator, seed)(this);\n    }\n    return scan_1.scan(accumulator)(this);\n}\nexports.scan = scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nexports.scan = scan;\nvar ScanOperator = (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) { hasSeed = false; }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = (function (_super) {\n    __extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilChanged_1 = require('../../operator/distinctUntilChanged');\nObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar distinctUntilChanged_1 = require('../operators/distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return distinctUntilChanged_1.distinctUntilChanged(compare, keySelector)(this);\n}\nexports.distinctUntilChanged = distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nexports.distinctUntilChanged = distinctUntilChanged;\nvar DistinctUntilChangedOperator = (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = (function (_super) {\n    __extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch_1.tryCatch(this.keySelector)(value);\n            if (key === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n            if (result === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar withLatestFrom_1 = require('../../operator/withLatestFrom');\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar withLatestFrom_1 = require('../operators/withLatestFrom');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return withLatestFrom_1.withLatestFrom.apply(void 0, args)(this);\n}\nexports.withLatestFrom = withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar do_1 = require('../../operator/do');\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar tap_1 = require('../operators/tap');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return tap_1.tap(nextOrObserver, error, complete)(this);\n}\nexports._do = _do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nexports.tap = tap;\nvar DoOperator = (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = (function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=tap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar startWith_1 = require('../../operator/startWith');\nObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar startWith_1 = require('../operators/startWith');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return startWith_1.startWith.apply(void 0, array)(this);\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\nvar concat_1 = require('../observable/concat');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\n        }\n    };\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar of_1 = require('./of');\nvar from_1 = require('./from');\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {\n        return from_1.from(observables[0]);\n    }\n    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar FromObservable_1 = require('./FromObservable');\nexports.from = FromObservable_1.FromObservable.create;\n//# sourceMappingURL=from.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isArrayLike_1 = require('../util/isArrayLike');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operators/observeOn');\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = (function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_1.observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray_1.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike_1.isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    /** @deprecated internal use only */ FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_1.observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nexports.FromObservable = FromObservable;\n//# sourceMappingURL=FromObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable = (function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    /** @deprecated internal use only */ PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_1.Observable));\nexports.PromiseObservable = PromiseObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = (function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_1.Observable));\nexports.IteratorObservable = IteratorObservable;\nvar StringIterator = (function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = str.length; }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_1.iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = (function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = toLength(arr); }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_1.iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[iterator_1.iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_1.iterator]();\n}\nvar maxSafeInteger = Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root_1.root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable = (function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_1.Observable));\nexports.ArrayLikeObservable = ArrayLikeObservable;\n//# sourceMappingURL=ArrayLikeObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexports.observeOn = observeOn;\nvar ObserveOnOperator = (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = (function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_1.Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_1.Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_1.Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\nvar ObserveOnMessage = (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexports.ObserveOnMessage = ObserveOnMessage;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n//# sourceMappingURL=Notification.js.map","\"use strict\";\nvar mergeAll_1 = require('./mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return mergeAll_1.mergeAll(1);\n}\nexports.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\nvar identity_1 = require('../util/identity');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nfunction identity(x) {\n    return x;\n}\nexports.identity = identity;\n//# sourceMappingURL=identity.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar share_1 = require('../../operator/share');\nObservable_1.Observable.prototype.share = share_1.share;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar share_1 = require('../operators/share');\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return share_1.share()(this);\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar multicast_1 = require('./multicast');\nvar refCount_1 = require('./refCount');\nvar Subject_1 = require('../Subject');\nfunction shareSubjectFactory() {\n    return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(/** @deprecated internal use only */ source, \n        /** @deprecated internal use only */ subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        /** @deprecated internal use only */ this._refCount = 0;\n        this._isComplete = false;\n    }\n    /** @deprecated internal use only */ ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    /** @deprecated internal use only */ ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount_1.refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMap_1 = require('../../operator/switchMap');\nObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar switchMap_1 = require('../operators/switchMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return switchMap_1.switchMap(project, resultSelector)(this);\n}\nexports.switchMap = switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = (function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = (function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */ SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeWhile_1 = require('../../operator/takeWhile');\nObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar takeWhile_1 = require('../operators/takeWhile');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return takeWhile_1.takeWhile(predicate)(this);\n}\nexports.takeWhile = takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nexports.takeWhile = takeWhile;\nvar TakeWhileOperator = (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = (function (_super) {\n    __extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.index = 0;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publish_1 = require('../../operator/publish');\nObservable_1.Observable.prototype.publish = publish_1.publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar publish_1 = require('../operators/publish');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return publish_1.publish(selector)(this);\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar Subject_1 = require('../Subject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return selector ?\n        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :\n        multicast_1.multicast(new Subject_1.Subject());\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar first_1 = require('../../operator/first');\nObservable_1.Observable.prototype.first = first_1.first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar first_1 = require('../operators/first');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return first_1.first(predicate, resultSelector, defaultValue)(this);\n}\nexports.first = first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.first = first;\nvar FirstOperator = (function () {\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = (function (_super) {\n    __extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.index = 0;\n        this.hasCompleted = false;\n        this._emitted = false;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value, index) {\n        if (this.resultSelector) {\n            this._tryResultSelector(value, index);\n            return;\n        }\n        this._emitFinal(value);\n    };\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this._emitFinal(result);\n    };\n    FirstSubscriber.prototype._emitFinal = function (value) {\n        var destination = this.destination;\n        if (!this._emitted) {\n            this._emitted = true;\n            destination.next(value);\n            destination.complete();\n            this.hasCompleted = true;\n        }\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = (function (_super) {\n    __extends(EmptyError, _super);\n    function EmptyError() {\n        var err = _super.call(this, 'no elements in sequence');\n        this.name = err.name = 'EmptyError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return EmptyError;\n}(Error));\nexports.EmptyError = EmptyError;\n//# sourceMappingURL=EmptyError.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar filter_1 = require('../../operator/filter');\nObservable_1.Observable.prototype.filter = filter_1.filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar filter_1 = require('../operators/filter');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return filter_1.filter(predicate, thisArg)(this);\n}\nexports.filter = filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nexports.filter = filter;\nvar FilterOperator = (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = (function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=filter.js.map","import {URL} from \"./konstante\";\r\n\r\nexport class Baza{\r\nstatic get()\r\n{\r\n    return fetch(URL)\r\n    .then(resp=>resp.json())\r\n}\r\n\r\nstatic addScore(User){\r\n    return fetch( URL, {\r\n      method: 'post',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain, */*',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(User)\r\n    })\r\n    .then(res=>res.json())\r\n}  \r\n}","import { checkCollision, getRandomPosition } from './polje';\r\nimport { SNAKE_LENGTH, APPLE_COUNT } from './konstante';\r\n\r\nexport function isGameOver(scene) {\r\n  let snake = scene.snake;\r\n  let head = snake[0];\r\n  let body = snake.slice(1, snake.length);\r\n  \r\n  return body.some(segment => checkCollision(segment, head));\r\n}\r\n\r\nexport function nextDirection(previous, next) {\r\n  let isOpposite = (previous, next) => {\r\n    return next.x === previous.x * -1 || next.y === previous.y * -1;\r\n  };\r\n\r\n  if (isOpposite(previous, next)) {\r\n    return previous;\r\n  }\r\n\r\n  return next;\r\n}\r\n\r\nexport function move(snake, [direction, snakeLength]) {\r\n  let nx = snake[0].x;\r\n  let ny = snake[0].y;\r\n\r\n  nx += 1 * direction.x;\r\n  ny += 1 * direction.y;\r\n\r\n  let tail;\r\n\r\n  if (snakeLength > snake.length) {\r\n    tail = { x: nx, y: ny };\r\n  } else {\r\n    tail = snake.pop();\r\n    tail.x = nx;\r\n    tail.y = ny;\r\n  }\r\n\r\n  snake.unshift(tail);\r\n\r\n  return snake;\r\n}\r\n\r\nexport function eat(apples, snake) {\r\n  let head = snake[0];\r\n\r\n  for (let i = 0; i < apples.length; i++) {\r\n    if (checkCollision(apples[i], head)) {\r\n      apples.splice(i, 1);\r\n      return [...apples, getRandomPosition(snake)];\r\n    }\r\n  }\r\n\r\n  return apples;\r\n}\r\n\r\nexport function generateSnake() {\r\n  let snake= [];\r\n\r\n  for (let i = SNAKE_LENGTH - 1; i >= 0; i--) {\r\n    snake.push({ x: i, y: 0 });\r\n  }\r\n\r\n  return snake;\r\n}\r\n\r\nexport function generateApples() {\r\n  let apples = [];\r\n\r\n  for (let i = 0; i < APPLE_COUNT; i++) {\r\n    apples.push(getRandomPosition());\r\n  }\r\n\r\n  return apples;\r\n}"],"sourceRoot":""}